/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    categories: Category;
    'web-pages': WebPage;
    'wiki-pages': WikiPage;
    'registry-pages': RegistryPage;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    'web-pages': WebPagesSelect<false> | WebPagesSelect<true>;
    'wiki-pages': WikiPagesSelect<false> | WikiPagesSelect<true>;
    'registry-pages': RegistryPagesSelect<false> | RegistryPagesSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * Organize pages into hierarchical categories.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  name: string;
  /**
   * A unique identifier for the page, used in the URL.
   */
  slug: string;
  parent?: (string | null) | Category;
  sort?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * General website pages (e.g., Homepage).
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "web-pages".
 */
export interface WebPage {
  id: string;
  title: string;
  /**
   * A unique identifier for the page, used in the URL.
   */
  slug: string;
  /**
   * Optimize your page for search engines and social sharing.
   */
  meta?: {
    /**
     * Custom title for search engines. If blank, the page title will be used.
     */
    title?: string | null;
    /**
     * Brief description of this page for search results and social sharing.
     */
    description?: string | null;
    /**
     * Image used when sharing this page on social media (1200×630px recommended).
     */
    image?: (string | null) | Media;
    /**
     * If checked, this page will not be indexed by search engines.
     */
    noIndex?: boolean | null;
    /**
     * The type of content this page represents (for structured data).
     */
    schemaType?: ('Article' | 'WebPage' | 'FAQPage' | 'Product' | 'Service' | 'Organization') | null;
    /**
     * Comma-separated keywords (optional).
     */
    keywords?: string | null;
  };
  layout: ContentBlock[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock".
 */
export interface ContentBlock {
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'content';
}
/**
 * Pages for the wiki section.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "wiki-pages".
 */
export interface WikiPage {
  id: string;
  title: string;
  /**
   * A unique identifier for the page, used in the URL.
   */
  slug: string;
  /**
   * Optimize your page for search engines and social sharing.
   */
  meta?: {
    /**
     * Custom title for search engines. If blank, the page title will be used.
     */
    title?: string | null;
    /**
     * Brief description of this page for search results and social sharing.
     */
    description?: string | null;
    /**
     * Image used when sharing this page on social media (1200×630px recommended).
     */
    image?: (string | null) | Media;
    /**
     * If checked, this page will not be indexed by search engines.
     */
    noIndex?: boolean | null;
    /**
     * The type of content this page represents (for structured data).
     */
    schemaType?: ('Article' | 'WebPage' | 'FAQPage' | 'Product' | 'Service' | 'Organization') | null;
    /**
     * Comma-separated keywords (optional).
     */
    keywords?: string | null;
  };
  category?: (string | null) | Category;
  pageBuilder: ContentBlock[];
  status: 'draft' | 'published';
  /**
   * Order in navigation (lower numbers appear first).
   */
  sort?: number | null;
  /**
   * If true, this page acts as the main page for its category/section.
   */
  isSectionHomepage?: boolean | null;
  parent?: (string | null) | WikiPage;
  /**
   * Optional icon name for navigation display.
   */
  icon?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Pages for the registry section.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "registry-pages".
 */
export interface RegistryPage {
  id: string;
  title: string;
  /**
   * A unique identifier for the page, used in the URL.
   */
  slug: string;
  /**
   * Optimize your page for search engines and social sharing.
   */
  meta?: {
    /**
     * Custom title for search engines. If blank, the page title will be used.
     */
    title?: string | null;
    /**
     * Brief description of this page for search results and social sharing.
     */
    description?: string | null;
    /**
     * Image used when sharing this page on social media (1200×630px recommended).
     */
    image?: (string | null) | Media;
    /**
     * If checked, this page will not be indexed by search engines.
     */
    noIndex?: boolean | null;
    /**
     * The type of content this page represents (for structured data).
     */
    schemaType?: ('Article' | 'WebPage' | 'FAQPage' | 'Product' | 'Service' | 'Organization') | null;
    /**
     * Comma-separated keywords (optional).
     */
    keywords?: string | null;
  };
  category?: (string | null) | Category;
  pageBuilder: ContentBlock[];
  status: 'draft' | 'published';
  /**
   * Order in navigation (lower numbers appear first).
   */
  sort?: number | null;
  /**
   * If true, this page acts as the main page for its category/section.
   */
  isSectionHomepage?: boolean | null;
  parent?: (string | null) | RegistryPage;
  /**
   * Optional icon name for navigation display.
   */
  icon?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'categories';
        value: string | Category;
      } | null)
    | ({
        relationTo: 'web-pages';
        value: string | WebPage;
      } | null)
    | ({
        relationTo: 'wiki-pages';
        value: string | WikiPage;
      } | null)
    | ({
        relationTo: 'registry-pages';
        value: string | RegistryPage;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  parent?: T;
  sort?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "web-pages_select".
 */
export interface WebPagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
        noIndex?: T;
        schemaType?: T;
        keywords?: T;
      };
  layout?:
    | T
    | {
        content?: T | ContentBlockSelect<T>;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock_select".
 */
export interface ContentBlockSelect<T extends boolean = true> {
  content?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "wiki-pages_select".
 */
export interface WikiPagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
        noIndex?: T;
        schemaType?: T;
        keywords?: T;
      };
  category?: T;
  pageBuilder?:
    | T
    | {
        content?: T | ContentBlockSelect<T>;
      };
  status?: T;
  sort?: T;
  isSectionHomepage?: T;
  parent?: T;
  icon?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "registry-pages_select".
 */
export interface RegistryPagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
        noIndex?: T;
        schemaType?: T;
        keywords?: T;
      };
  category?: T;
  pageBuilder?:
    | T
    | {
        content?: T | ContentBlockSelect<T>;
      };
  status?: T;
  sort?: T;
  isSectionHomepage?: T;
  parent?: T;
  icon?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}